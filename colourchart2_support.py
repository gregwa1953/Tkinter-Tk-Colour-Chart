#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
#! /usr/bin/env python
#  -*- coding: utf-8 -*-
# ======================================================
#     colourchart2_support.py
#  ------------------------------------------------------
# Created for Learning Page book
# Written by G.D. Walters
# Copyright (c) 2020 by G.D. Walters
# This source code is released under the MIT License
# ======================================================
# Support module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 12, 2020 08:43:12 AM CDT  platform: Linux
# ===================================================
# This program is based on one presented on the Internet at
# http://www.science.smith.edu/dftwiki/index.php/Color_Charts_for_TKinter
# which is taken from yet another site:
# http://stackoverflow.com/questions/4969543/colour-chart-for-tkinter-and-tix-using-python
# ===================================================
from time import time, localtime, strftime
import tkinter
import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    root.title('Tk/Tkinter Colour Chart')
    fill_canvas()


def fill_canvas():
    global b
    global id
    COLORS = ['snow', 'ghost white', 'white smoke', 'gainsboro', 'floral white', 'old lace',
              'linen', 'antique white', 'papaya whip', 'blanched almond', 'bisque', 'peach puff',
              'navajo white', 'lemon chiffon', 'mint cream', 'azure', 'alice blue', 'lavender',
              'lavender blush', 'misty rose', 'dark slate gray', 'dim gray', 'slate gray',
              'light slate gray', 'gray', 'light grey', 'midnight blue', 'navy', 'cornflower blue', 'dark slate blue',
              'slate blue', 'medium slate blue', 'light slate blue', 'medium blue', 'royal blue',  'blue',
              'dodger blue', 'deep sky blue', 'sky blue', 'light sky blue', 'steel blue', 'light steel blue',
              'light blue', 'powder blue', 'pale turquoise', 'dark turquoise', 'medium turquoise', 'turquoise',
              'cyan', 'light cyan', 'cadet blue', 'medium aquamarine', 'aquamarine', 'dark green', 'dark olive green',
              'dark sea green', 'sea green', 'medium sea green', 'light sea green', 'pale green', 'spring green',
              'lawn green', 'medium spring green', 'green yellow', 'lime green', 'yellow green',
              'forest green', 'olive drab', 'dark khaki', 'khaki', 'pale goldenrod', 'light goldenrod yellow',
              'light yellow', 'yellow', 'gold', 'light goldenrod', 'goldenrod', 'dark goldenrod', 'rosy brown',
              'indian red', 'saddle brown', 'sandy brown',
              'dark salmon', 'salmon', 'light salmon', 'orange', 'dark orange',
              'coral', 'light coral', 'tomato', 'orange red', 'red', 'hot pink', 'deep pink', 'pink', 'light pink',
              'pale violet red', 'maroon', 'medium violet red', 'violet red',
              'medium orchid', 'dark orchid', 'dark violet', 'blue violet', 'purple', 'medium purple',
              'thistle', 'snow2', 'snow3',
              'snow4', 'seashell2', 'seashell3', 'seashell4', 'AntiqueWhite1', 'AntiqueWhite2',
              'AntiqueWhite3', 'AntiqueWhite4', 'bisque2', 'bisque3', 'bisque4', 'PeachPuff2',
              'PeachPuff3', 'PeachPuff4', 'NavajoWhite2', 'NavajoWhite3', 'NavajoWhite4',
              'LemonChiffon2', 'LemonChiffon3', 'LemonChiffon4', 'cornsilk2', 'cornsilk3',
              'cornsilk4', 'ivory2', 'ivory3', 'ivory4', 'honeydew2', 'honeydew3', 'honeydew4',
              'LavenderBlush2', 'LavenderBlush3', 'LavenderBlush4', 'MistyRose2', 'MistyRose3',
              'MistyRose4', 'azure2', 'azure3', 'azure4', 'SlateBlue1', 'SlateBlue2', 'SlateBlue3',
              'SlateBlue4', 'RoyalBlue1', 'RoyalBlue2', 'RoyalBlue3', 'RoyalBlue4', 'blue2', 'blue4',
              'DodgerBlue2', 'DodgerBlue3', 'DodgerBlue4', 'SteelBlue1', 'SteelBlue2',
              'SteelBlue3', 'SteelBlue4', 'DeepSkyBlue2', 'DeepSkyBlue3', 'DeepSkyBlue4',
              'SkyBlue1', 'SkyBlue2', 'SkyBlue3', 'SkyBlue4', 'LightSkyBlue1', 'LightSkyBlue2',
              'LightSkyBlue3', 'LightSkyBlue4', 'SlateGray1', 'SlateGray2', 'SlateGray3',
              'SlateGray4', 'LightSteelBlue1', 'LightSteelBlue2', 'LightSteelBlue3',
              'LightSteelBlue4', 'LightBlue1', 'LightBlue2', 'LightBlue3', 'LightBlue4',
              'LightCyan2', 'LightCyan3', 'LightCyan4', 'PaleTurquoise1', 'PaleTurquoise2',
              'PaleTurquoise3', 'PaleTurquoise4', 'CadetBlue1', 'CadetBlue2', 'CadetBlue3',
              'CadetBlue4', 'turquoise1', 'turquoise2', 'turquoise3', 'turquoise4', 'cyan2', 'cyan3',
              'cyan4', 'DarkSlateGray1', 'DarkSlateGray2', 'DarkSlateGray3', 'DarkSlateGray4',
              'aquamarine2', 'aquamarine4', 'DarkSeaGreen1', 'DarkSeaGreen2', 'DarkSeaGreen3',
              'DarkSeaGreen4', 'SeaGreen1', 'SeaGreen2', 'SeaGreen3', 'PaleGreen1', 'PaleGreen2',
              'PaleGreen3', 'PaleGreen4', 'SpringGreen2', 'SpringGreen3', 'SpringGreen4',
              'green2', 'green3', 'green4', 'chartreuse2', 'chartreuse3', 'chartreuse4',
              'OliveDrab1', 'OliveDrab2', 'OliveDrab4', 'DarkOliveGreen1', 'DarkOliveGreen2',
              'DarkOliveGreen3', 'DarkOliveGreen4', 'khaki1', 'khaki2', 'khaki3', 'khaki4',
              'LightGoldenrod1', 'LightGoldenrod2', 'LightGoldenrod3', 'LightGoldenrod4',
              'LightYellow2', 'LightYellow3', 'LightYellow4', 'yellow2', 'yellow3', 'yellow4',
              'gold2', 'gold3', 'gold4', 'goldenrod1', 'goldenrod2', 'goldenrod3', 'goldenrod4',
              'DarkGoldenrod1', 'DarkGoldenrod2', 'DarkGoldenrod3', 'DarkGoldenrod4',
              'RosyBrown1', 'RosyBrown2', 'RosyBrown3', 'RosyBrown4', 'IndianRed1', 'IndianRed2',
              'IndianRed3', 'IndianRed4', 'sienna1', 'sienna2', 'sienna3', 'sienna4', 'burlywood1',
              'burlywood2', 'burlywood3', 'burlywood4', 'wheat1', 'wheat2', 'wheat3', 'wheat4', 'tan1',
              'tan2', 'tan4', 'chocolate1', 'chocolate2', 'chocolate3', 'firebrick1', 'firebrick2',
              'firebrick3', 'firebrick4', 'brown1', 'brown2', 'brown3', 'brown4', 'salmon1', 'salmon2',
              'salmon3', 'salmon4', 'LightSalmon2', 'LightSalmon3', 'LightSalmon4', 'orange2',
              'orange3', 'orange4', 'DarkOrange1', 'DarkOrange2', 'DarkOrange3', 'DarkOrange4',
              'coral1', 'coral2', 'coral3', 'coral4', 'tomato2', 'tomato3', 'tomato4', 'OrangeRed2',
              'OrangeRed3', 'OrangeRed4', 'red2', 'red3', 'red4', 'DeepPink2', 'DeepPink3', 'DeepPink4',
              'HotPink1', 'HotPink2', 'HotPink3', 'HotPink4', 'pink1', 'pink2', 'pink3', 'pink4',
              'LightPink1', 'LightPink2', 'LightPink3', 'LightPink4', 'PaleVioletRed1',
              'PaleVioletRed2', 'PaleVioletRed3', 'PaleVioletRed4', 'maroon1', 'maroon2',
              'maroon3', 'maroon4', 'VioletRed1', 'VioletRed2', 'VioletRed3', 'VioletRed4',
              'magenta2', 'magenta3', 'magenta4', 'orchid1', 'orchid2', 'orchid3', 'orchid4', 'plum1',
              'plum2', 'plum3', 'plum4', 'MediumOrchid1', 'MediumOrchid2', 'MediumOrchid3',
              'MediumOrchid4', 'DarkOrchid1', 'DarkOrchid2', 'DarkOrchid3', 'DarkOrchid4',
              'purple1', 'purple2', 'purple3', 'purple4', 'MediumPurple1', 'MediumPurple2',
              'MediumPurple3', 'MediumPurple4', 'thistle1', 'thistle2', 'thistle3', 'thistle4',
              'gray1', 'gray2', 'gray3', 'gray4', 'gray5', 'gray6', 'gray7', 'gray8', 'gray9', 'gray10',
              'gray11', 'gray12', 'gray13', 'gray14', 'gray15', 'gray16', 'gray17', 'gray18', 'gray19',
              'gray20', 'gray21', 'gray22', 'gray23', 'gray24', 'gray25', 'gray26', 'gray27', 'gray28',
              'gray29', 'gray30', 'gray31', 'gray32', 'gray33', 'gray34', 'gray35', 'gray36', 'gray37',
              'gray38', 'gray39', 'gray40', 'gray42', 'gray43', 'gray44', 'gray45', 'gray46', 'gray47',
              'gray48', 'gray49', 'gray50', 'gray51', 'gray52', 'gray53', 'gray54', 'gray55', 'gray56',
              'gray57', 'gray58', 'gray59', 'gray60', 'gray61', 'gray62', 'gray63', 'gray64', 'gray65',
              'gray66', 'gray67', 'gray68', 'gray69', 'gray70', 'gray71', 'gray72', 'gray73', 'gray74',
              'gray75', 'gray76', 'gray77', 'gray78', 'gray79', 'gray80', 'gray81', 'gray82', 'gray83',
              'gray84', 'gray85', 'gray86', 'gray87', 'gray88', 'gray89', 'gray90', 'gray91', 'gray92',
              'gray93', 'gray94', 'gray95', 'gray97', 'gray98', 'gray99']
    TOODARK = ['dark slate gray', 'dim gray', 'midnight blue', 'dark green', 'navy', 'dark slate blue',
               'medium blue', 'royal blue', 'DodgerBlue4', 'blue', 'SlateBlue4', 'RoyalBlue3', 'RoyalBlue4',
               'blue2', 'blue4', 'DodgerBlue2', 'slate blue', 'maroon', 'purple', 'purple3', 'purple4',
               'MediumPurple4', 'gray1', 'gray2', 'gray3', 'gray4', 'gray5', 'gray6', 'gray7', 'gray8',
               'gray9', 'gray10', 'gray11', 'gray12', 'gray13', 'gray14', 'gray15', 'gray16', 'gray17',
               'gray18', 'gray19', 'gray20', 'gray21', 'gray22', 'gray23', 'gray24', 'gray25', 'gray26',
               'gray27', 'gray28', 'gray29', 'gray30', 'cyan4', 'firebrick4', 'red4', 'dark olive green']
    b = {}
    id = {}
    no_buttons_per_row = 12
    row = 0
    for j in range(len(COLORS)):
        row, col = divmod(j, no_buttons_per_row)
        b[j] = tk.Label(w.Custom1, text=COLORS[j], height=1, width=17)
        b[j].configure(font="-family {DejaVu Sans} -size 8")
        b[j].configure(background=COLORS[j])
        # ToolTip(b[j], 'DejaVuSans', COLORS[j])
        if COLORS[j] in TOODARK:
            b[j].configure(foreground=COLORS[0])
        b[j].grid(row=row, column=col)
        id[b[j].winfo_id()] = j
    pass


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


# Custom = tk.Frame  # To be updated by user with name of custom widget.

# ===================================================
# ScrolledFrame class from Don Rozenberg
# ===================================================
# I found this code on the web at
# http://tkinter.unpythonic.net/wiki/ScrolledFrame and thought it would
# implement a canvas widget that I could use with PAGE, but I don't understand
# it well enough to put it in my supported widgets.

GM_KEYS = set(
    list(vars(tkinter.Place).keys()) +
    list(vars(tkinter.Pack).keys()) +
    list(vars(tkinter.Grid).keys())
)


class ScrolledFrame(object):
    _managed = False
    # XXX These could be options
    x_incr = 10
    y_incr = 10

    def __init__(self, master=None, **kw):
        self.width = kw.pop('width', 200)
        self.height = kw.pop('height', 200)

        self._canvas = tkinter.Canvas(master, **kw)
        self.master = self._canvas.master
        self._hsb = tkinter.Scrollbar(orient='horizontal',
                                      command=self._canvas.xview)
        self._vsb = tkinter.Scrollbar(orient='vertical',
                                      command=self._canvas.yview)
        self._canvas.configure(
            xscrollcommand=self._hsb.set,
            yscrollcommand=self._vsb.set)

        self._placeholder = tkinter.Frame(self._canvas)
        self._canvas.create_window(0, 0, anchor='nw', window=self._placeholder)

        self._placeholder.bind('<Map>', self._prepare_scroll)
        self._placeholder.bind('<Configure>', self._prepare_scroll)
        for widget in (self._placeholder, self._canvas):
            widget.bind('<Button-4>', self.scroll_up)
            widget.bind('<Button-5>', self.scroll_down)

    def window_width(self):
        ''' Rozen. Returns the width of the scrolled window.'''
        return self._canvas.winfo_width()

    def window_height(self):
        ''' Rozen, Returns the height of scrolled window.'''
        return self._canvas.winfo_height()

    def __getattr__(self, attr):

        if attr in GM_KEYS:
            if not self._managed:
                # Position the scrollbars now.
                self._managed = True
                if attr == 'pack':
                    self._hsb.pack(side='bottom', fill='x')
                    self._vsb.pack(side='right', fill='y')
                elif attr == 'grid':
                    self._hsb.grid(row=1, column=0, sticky='ew')
                    self._vsb.grid(row=0, column=1, sticky='ns')
                elif attr == 'place':  # Added by Rozen
                    self._hsb.pack(side='bottom', fill='x')
                    self._vsb.pack(side='right', fill='y')

            return getattr(self._canvas, attr)

        else:
            return getattr(self._placeholder, attr)

    def yscroll(self, *args):
        self._canvas.yview_scroll(*args)

    def scroll_up(self, event=None):
        self.yscroll(-self.y_incr, 'units')

    def scroll_down(self, event=None):
        self.yscroll(self.y_incr, 'units')

    def see(self, event):
        widget = event.widget
        w_height = widget.winfo_reqheight()
        c_height = self._canvas.winfo_height()
        y_pos = widget.winfo_rooty()

        if (y_pos - w_height) < 0:
            # Widget focused is above the current view
            while (y_pos - w_height) < self.y_incr:
                self.scroll_up()
                self._canvas.update_idletasks()
                y_pos = widget.winfo_rooty()
        elif (y_pos - w_height) > c_height:
            # Widget focused is below the current view
            while (y_pos - w_height - self.y_incr) > c_height:
                self.scroll_down()
                self._canvas.update_idletasks()
                y_pos = widget.winfo_rooty()

    def _prepare_scroll(self, event):
        frame = self._placeholder
        frame.unbind('<Map>')

        if not frame.children:
            # Nothing to scroll.
            return

        for child in frame.children.values():
            child.bind('<FocusIn>', self.see)
            child.bind('<Button-4>', self.scroll_up)  # Rozen
            child.bind('<Button-5>', self.scroll_down)

        width, height = frame.winfo_reqwidth(), frame.winfo_reqheight()

        self._canvas.configure(scrollregion=(0, 0, width, height),
                               yscrollincrement=self.y_incr, xscrollincrement=self.x_incr)

        self._canvas.configure(width=self.width, height=self.height)

# ===================================================
# End of ScrolledFrame Class
# ===================================================


Custom = ScrolledFrame

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================


class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """

    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                   font=tooltip_font,
                   aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================


if __name__ == '__main__':
    import colourchart2
    colourchart2.vp_start_gui()
